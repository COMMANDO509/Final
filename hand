import cv2
import numpy as np
import mediapipe as mp
import pyautogui
from collections import deque


bpoints = [deque(maxlen=1024)]
gpoints = [deque(maxlen=1024)]
rpoints = [deque(maxlen=1024)]
ypoints = [deque(maxlen=1024)]
blue_index = green_index = red_index = yellow_index = 0
colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (0, 255, 255)]
colorIndex = 0
mode = 'draw'


paintWindow = np.ones((471, 636, 3), dtype=np.uint8) * 255
buttons = [("CLEAR", (40, 1, 140, 65)), ("BLUE", (160, 1, 255, 65)),
           ("GREEN", (275, 1, 370, 65)), ("RED", (390, 1, 485, 65)),
           ("YELLOW", (505, 1, 600, 65))]
for text, (x1, y1, x2, y2) in buttons:
    cv2.rectangle(paintWindow, (x1, y1), (x2, y2), (0, 0, 0), 2)
    cv2.putText(paintWindow, text, (x1 + 10, y1 + 33), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 2)


mp_hands = mp.solutions.hands
hands = mp_hands.Hands(max_num_hands=2, min_detection_confidence=0.7)
mp_face_mesh = mp.solutions.face_mesh.FaceMesh(refine_landmarks=True)
mp_draw = mp.solutions.drawing_utils


screen_w, screen_h = pyautogui.size()
cap = cv2.VideoCapture(0)


def fingers_up(hand_landmarks):
    finger_tips = [8, 12, 16, 20]
    fingers = []
    for tip in finger_tips:
        fingers.append(hand_landmarks.landmark[tip].y < hand_landmarks.landmark[tip - 2].y)
    return fingers.count(True)

while True:
    ret, frame = cap.read()
    if not ret:
        break
    frame = cv2.flip(frame, 1)
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    result_hands = hands.process(frame_rgb)
    result_face = mp_face_mesh.process(frame_rgb)
    frame_h, frame_w, _ = frame.shape

    if result_hands.multi_hand_landmarks:
        for hand_landmarks, handedness in zip(result_hands.multi_hand_landmarks, result_hands.multi_handedness):
            label = handedness.classification[0].label
            mp_draw.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

            if label == 'Left':
                if fingers_up(hand_landmarks) >= 4:
                    mode = 'eye'
                elif fingers_up(hand_landmarks) <= 1:
                    mode = 'draw'

            elif label == 'Right' and mode == 'draw':
                landmarks = []
                for lm in hand_landmarks.landmark:
                    lmx, lmy = int(lm.x * 640), int(lm.y * 480)
                    landmarks.append([lmx, lmy])
                fore_finger = tuple(landmarks[8])
                thumb = tuple(landmarks[4])
                cv2.circle(frame, fore_finger, 3, (0, 255, 0), -1)

                if (thumb[1] - fore_finger[1]) < 30:
                    bpoints.append(deque(maxlen=512)); blue_index += 1
                    gpoints.append(deque(maxlen=512)); green_index += 1
                    rpoints.append(deque(maxlen=512)); red_index += 1
                    ypoints.append(deque(maxlen=512)); yellow_index += 1

                elif fore_finger[1] <= 65:
                    x = fore_finger[0]
                    if 40 <= x <= 140:
                        bpoints = [deque(maxlen=512)]
                        gpoints = [deque(maxlen=512)]
                        rpoints = [deque(maxlen=512)]
                        ypoints = [deque(maxlen=512)]
                        blue_index = green_index = red_index = yellow_index = 0
                        paintWindow[67:, :, :] = 255
                    elif 160 <= x <= 255:
                        colorIndex = 0
                    elif 275 <= x <= 370:
                        colorIndex = 1
                    elif 390 <= x <= 485:
                        colorIndex = 2
                    elif 505 <= x <= 600:
                        colorIndex = 3
                else:
                    if colorIndex == 0:
                        bpoints[blue_index].appendleft(fore_finger)
                    elif colorIndex == 1:
                        gpoints[green_index].appendleft(fore_finger)
                    elif colorIndex == 2:
                        rpoints[red_index].appendleft(fore_finger)
                    elif colorIndex == 3:
                        ypoints[yellow_index].appendleft(fore_finger)
    else:
        if mode == 'draw':
            bpoints.append(deque(maxlen=512)); blue_index += 1
            gpoints.append(deque(maxlen=512)); green_index += 1
            rpoints.append(deque(maxlen=512)); red_index += 1
            ypoints.append(deque(maxlen=512)); yellow_index += 1

   
    if result_face.multi_face_landmarks and mode == 'eye':
        landmarks = result_face.multi_face_landmarks[0].landmark
        for id, lm in enumerate(landmarks[474:478]):
            x, y = int(lm.x * frame_w), int(lm.y * frame_h)
            cv2.circle(frame, (x, y), 3, (0, 255, 0), -1)
            if id == 1:
                screen_x = screen_w * lm.x
                screen_y = screen_h * lm.y
                pyautogui.moveTo(screen_x, screen_y)
        left_eye = [landmarks[145], landmarks[159]]
        if abs(left_eye[0].y - left_eye[1].y) < 0.004:
            pyautogui.click()
            pyautogui.sleep(1)

   
    for text, (x1, y1, x2, y2) in buttons:
        cv2.rectangle(paintWindow, (x1, y1), (x2, y2), (0, 0, 0), 2)
        cv2.putText(paintWindow, text, (x1 + 10, y1 + 33), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 2)

   
    points = [bpoints, gpoints, rpoints, ypoints]
    for i in range(len(points)):
        for j in range(len(points[i])):
            for k in range(1, len(points[i][j])):
                if points[i][j][k - 1] is None or points[i][j][k] is None:
                    continue
                cv2.line(paintWindow, points[i][j][k - 1], points[i][j][k], colors[i], 2)

  
    cv2.putText(frame, f'Mode: {mode.upper()}', (10, 470), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (100, 100, 100), 2)

    cv2.imshow("Paint", paintWindow)
    cv2.imshow("Output", frame)

   
    key = cv2.waitKey(1) & 0xFF
    if key == 27 or key == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
